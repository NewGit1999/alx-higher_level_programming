module: adding integer

===========================
How to use ''add_integer''
===========================

This module defines an integer addition function ``add_integer(a, b=98)``.

Using it
=====

this function returns the result of addition.

    >>> add_integer = __import__('0-add_integer').add_integer


add positive with positive:
    >>> add_integer(2, 5)
    7


add positive with negative:
    >>> add_integer(2, -6)
    -4


add two floats :
    >>> add_integer(4.0, 2.0)
    6


add float with integer:
    >>> add_integer(5.1, 3)
    8

add float with no float:
    >>> add_integer(4.2, -7)
    -3

add 2 with 98
    >>> add_integer(2)
    100


add string with integer

    >>> add_integer("food", 7)
    Traceback (most recent call last):
    TypeError: a must be an integer



    >>> add_integer(3, "cats")
    Traceback (most recent call last):
    TypeError: b must be an integer


add Null numbers:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer


    >>> add_integer(1.5, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


add string with string:
    >>> add_integer("peer", "world")
    Traceback (most recent call last):
    TypeError: a must be an integer

add integer with boolean:
    >>> add_integer(False, 1)
    Traceback (most recent call last):
    TypeError: a must be an integer


add for inf
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

    >>> add_integer(3, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


add nan numbers:
   >>> add_integer(float('nan'))
   Traceback (most recent call last):
   ValueError: cannot convert float NaN to integer



    >>> add_integer(1, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
